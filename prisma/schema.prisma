// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  strategies    Strategy[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Position {
  LONG
  SHORT
}

enum OptionType {
  CALL
  PUT
}

enum Trade {
  OPEN
  CLOSED
}

enum UnderAssetType {
  STOCK
}

model Strategy {
  id           String       @id @default(cuid())
  strategySlug String       @unique
  userId       String       @map("user_id")
  title        String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  options      Option[]
  underAssets  UnderAsset[]
  fees         Float?

  @@map("strategies")
}

model Option {
  id             String     @id @default(cuid())
  optionSlug     String     @unique
  type           OptionType
  position       Position
  trade          Trade
  strategyId     String
  spotPrice      Float
  strikePrice    Float
  expirationDate DateTime
  volatility     Float
  interestRate   Float
  dividend       Float      @default(0)
  strikeInterval Float
  openPrice      Float
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  strategy       Strategy   @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@map("options")
}

model UnderAsset {
  id             String         @id @default(cuid())
  underAssetSlug String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  type           UnderAssetType
  openPrice      Float
  closePrice     Float?
  position       Position
  trade          Trade
  strategyId     String
  strategy       Strategy       @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@map("underAssets")
}
